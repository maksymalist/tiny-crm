import { signIn, signOut, useSession } from "next-auth/react";
import { useState } from "react";
import Head from "next/head";
import Link from "next/link";

import { api } from "@/utils/api";
import Nav from "@/components/Nav";
import PaymentForm, { isValidCreditCardNumber } from "@/components/CardFrom";
import ProspectForm from "@/components/ProspectForm";
import { Calendar } from "@/components/Calendar";
import AddressForm from "@/components/AddressForm";
import NurtureTimeline from "@/components/NurtureTimeline";
import ClientProfile from "../components/ClientProfile";

type Reminder = {
  date: Date;
  title: string;
  time: string;
  message: string;
};

export default function Home() {
  const hello = api.post.hello.useQuery({ text: "from tRPC" });
  const [count, setCount] = useState(0);

  //credit card form
  const [number, setNumber] = useState("");

  //prospect form
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [notes, setNotes] = useState("");
  const [date, setDate] = useState<Date>();
  const [location, setLocation] = useState("");
  const [zip, setZip] = useState("");
  const [qrr, setQrr] = useState(0);

  //reminder scheduler
  const [reminders, setReminders] = useState<Reminder[]>([
    {
      title: "Service reminder",
      date: new Date(),
      message: "Check-up message before service",
      time: "12:00",
    },
  ]);

  const createClient = async () => {};

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="absolute inset-0 flex h-full min-h-screen w-screen flex-col items-center justify-start bg-white bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]">
        <Nav orders={count} />
        {count === 0 && (
          <section className="mt-10 h-[70%]">
            <PaymentForm number={number} setNumber={setNumber} />
          </section>
        )}
        {count === 1 && (
          <section className="mt-10 h-[70%]">
            <ProspectForm
              firstName={firstName}
              lastName={lastName}
              email={email}
              phone={phone}
              notes={notes}
              date={date as Date}
              location={location}
              zip={zip}
              qrr={qrr}
              setFirstName={setFirstName}
              setLastName={setLastName}
              setEmail={setEmail}
              setPhone={setPhone}
              setNotes={setNotes}
              setDate={setDate}
              setLocation={setLocation}
              setZip={setZip}
              setQrr={setQrr}
            />
          </section>
        )}
        {/* {count === 2 && (
          <section className="mt-10 h-[70%]">
            <AddressForm />
          </section>
        )} */}
        {/* {count === 2 && (
          <section className="mt-10 h-[70%]">
            <h1 className="mb-6 text-2xl">Nurture Dates ðŸ“†</h1>{" "}
            <Calendar
              mode="single"
              selected={new Date()}
              onSelect={(date) => {
                console.log(date);
              }}
            />
          </section>
        )} */}
        {count === 2 && (
          <section className="mt-10 h-[70%] w-full max-w-[600px] overflow-y-scroll px-4">
            <h1 className="mb-6 text-2xl">Notification Dates ðŸ“†</h1>{" "}
            <NurtureTimeline
              reminders={reminders}
              setReminders={setReminders}
            />
          </section>
        )}
        {count === 3 && (
          <section className="w-full px-4">
            <ClientProfile
              firstName={firstName}
              lastName={lastName}
              phone={phone}
              notes={notes}
              date={date as Date}
              location={location}
              zip={zip}
              reminders={reminders}
              email={email}
              qrr={qrr}
            />
          </section>
        )}
        <section className="fixed bottom-2 flex w-full justify-end">
          <div className="ml-6 flex flex-row">
            {count > 0 && (
              <button
                className="mr-2 rounded-md bg-slate-500 p-2 px-4 text-white"
                onClick={() => setCount((c) => c - 1)}
              >
                Back
              </button>
            )}
            {count == 3 ? (
              <button
                className={`mr-2 rounded-md bg-blue-500 p-2 px-4 text-white `}
                onClick={() => createClient()}
              >
                Finalize ðŸŽ‰
              </button>
            ) : (
              <button
                className={`mr-2 rounded-md bg-green-500 p-2 px-4 text-white ${count == 0 && !isValidCreditCardNumber(number) ? "bg-red-400 hover:cursor-not-allowed" : ""}`}
                onClick={() => setCount((c) => c + 1)}
                disabled={
                  count == 0 && !isValidCreditCardNumber(number) ? true : false
                }
              >
                {count == 0 && isValidCreditCardNumber(number)
                  ? "Next"
                  : count > 0 && count !== 3
                    ? "Next"
                    : "Validate Card!!"}
              </button>
            )}
          </div>
        </section>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
